#!/bin/bash
# johndrinkwater.name dotfiles init script; nothing special, hope it breaks nothing if you try it

# this is the initial version, to boot‐strap a new machine, before logging out
# and having the install just work™
# XXX it doesn’t replace distro installed bashrc yet, that will be an update or
# two in the future, once I thoroughly review my current install…

if [ -f "${HOME}/settings/dotfiles-setup-done" ]
then
	echo -n "Dotfiles setup was already run on "
	cat "${HOME}/settings/dotfiles-setup-done"
	echo "Remove \`${HOME}/settings/dotfiles-setup-done\` to rerun."
    exit 1
fi

# Header guard for new systems that have pretty, and not a full, static one.
HOST=$(hostname)
SHORTHOST=$(hostname -s)
if [ "$HOST" == "$SHORTHOST" ]
then
	echo "‘hostname’ has not been fully set."
    exit 1
fi

mkdir -p "${HOME}/settings"
mkdir -p "${HOME}/bin"
BINHOME="${HOME}/bin"
# XXX ln dotfiles/bin → ~/bin
# XXX cp dotfiles/fonts → font location

mkdir -p "${HOME}/code"

  XDG_DATA_HOME="${HOME}/settings/data"
if [ -d "${HOME}/.local/share" ]
then
    mv "${HOME}/.local/share" "${XDG_DATA_HOME}"
else
    mkdir -p "${XDG_DATA_HOME}"
fi

XDG_CONFIG_HOME="${HOME}/settings/config"
if [ -d "${HOME}/.config" ]
then
    mv "${HOME}/.config" "${XDG_CONFIG_HOME}"
else
    mkdir -p "${XDG_CONFIG_HOME}"
fi

XDG_CACHE_HOME="${HOME}/settings/cache"
if [ -d "${HOME}/.cache" ]
then
    mv "${HOME}/.cache" "${XDG_CACHE_HOME}"
else
    mkdir -p "${XDG_CACHE_HOME}"
fi

# Can make without a move, because these are ephemeral
XDG_RUNTIME_DIR="${HOME}/settings/.runtime"
mkdir -p "${XDG_RUNTIME_DIR}"
XDG_STATE_HOME="${HOME}/settings/state"
mkdir -p "${XDG_STATE_HOME}"

# user dirs
ln -sf "${HOME}/code/dotfiles/user-dirs.dirs"	"${XDG_CONFIG_HOME}/user-dirs.dirs"
# xdg-user-dirs-update is nowhere near useful, so:
source "${XDG_CONFIG_HOME}/user-dirs.dirs"
mkdir -p "${XDG_DESKTOP_DIR}"
mkdir -p "${XDG_DOWNLOAD_DIR}"
mkdir -p "${XDG_TEMPLATES_DIR}"
mkdir -p "${XDG_PUBLICSHARE_DIR}"
mkdir -p "${XDG_DOCUMENTS_DIR}"
mkdir -p "${XDG_MUSIC_DIR}"
mkdir -p "${XDG_PICTURES_DIR}"
mkdir -p "${XDG_VIDEOS_DIR}"

# nv shader+compute cache
mkdir -p "${XDG_CACHE_HOME}/nv/ComputeCache"

# make and copy vim into position
mkdir -p										"${XDG_CACHE_HOME}/vim"
if [ -f "${HOME}/.viminfo" ]
then
    mv -n "${HOME}/.viminfo" "${XDG_CACHE_HOME}/vim/viminfo"
fi
mkdir -p										"${XDG_CONFIG_HOME}/vim"
# Yes, these two lines are scary.
ln -sf /usr/share/vim/vim[0-9]*					"${XDG_CONFIG_HOME}/vim/"
sudo ln -sf /usr/share/vim/vim[0-9]*   			"/usr/share/vim/vimcurrent"
ln -sf "${HOME}/code/dotfiles/vimrc"			"${XDG_CONFIG_HOME}/vim/vimrc"
# XXX finish vim setup (need to install ext, link to system installed ext)

mkdir -p "${XDG_CONFIG_HOME}/dvdcss"
mkdir -p "${XDG_CONFIG_HOME}/gimp"
mkdir -p "${XDG_CONFIG_HOME}/lynx"
mkdir -p "${XDG_CONFIG_HOME}/mplayer"
mkdir -p "${XDG_CONFIG_HOME}/scummvm"
mkdir -p "${XDG_CONFIG_HOME}/task"
mkdir -p   "${XDG_DATA_HOME}/scummvm"
mkdir -p   "${XDG_DATA_HOME}/wine"

# repo tools
mkdir -p "${XDG_CONFIG_HOME}/subversion"
mkdir -p "${XDG_CONFIG_HOME}/bazaar"
mkdir -p "${XDG_STATE_HOME}/bazaar"

# crown jewels
mkdir -p "${HOME}/settings/pass"
# gnupg
if [ -d "${HOME}/.gnupg" ]
then
	mv -n "${HOME}/.gnupg" "${HOME}/settings/keys"
else
	mkdir -p "${HOME}/settings/keys"
fi

# Bash
mkdir -p "${XDG_CONFIG_HOME}/bash"
mkdir -p "${XDG_CONFIG_HOME}/bash/initial"
if [ -e "${HOME}/.bash_history" ]
then
	mv -n "${HOME}/.bash_history" "${XDG_CONFIG_HOME}/bash/history"
else
	touch "${XDG_CONFIG_HOME}/bash/history"
fi
if [ -e "${HOME}/.bashrc" ]
then
	mv -n "${HOME}/.bashrc" "${XDG_CONFIG_HOME}/bash/initial/$(date --iso-8601).bashrc"
fi
ln -sf "${HOME}/code/dotfiles/bashrc"			"${HOME}/.bashrc"

# less
if [ -f "${HOME}/.lesshst" ]
then
    rm "${HOME}/.lesshst"
fi

# python3
mkdir -p										"${XDG_CONFIG_HOME}/python"
ln -sf "${HOME}/code/dotfiles/python_history"	"${XDG_CONFIG_HOME}/python/python_history"
mkdir -p										"${XDG_STATE_HOME}/pip"

# ssh
if [ -d "${HOME}/.ssh" ]
then
	mv "${HOME}/.ssh" "${XDG_CONFIG_HOME}/ssh"
else
	mkdir -p "${XDG_CONFIG_HOME}/ssh"
fi
ln -sf "${HOME}/code/dotfiles/sshconfig" "${XDG_CONFIG_HOME}/ssh/config"
# XXX make "${XDG_CONFIG_HOME}/ssh/${HOSTNAME}_rsa"

# gdb
mkdir -p										"${XDG_CONFIG_HOME}/gdb"
ln -sf "${HOME}/code/dotfiles/gdbinit"			"${XDG_CONFIG_HOME}/gdb/gdbinit"

# git
mkdir -p "${XDG_CONFIG_HOME}/git"
ln -sf "${HOME}/code/dotfiles/gitconfig"		"${XDG_CONFIG_HOME}/git/config"
ln -sf "${HOME}/code/dotfiles/gitignore"		"${XDG_CONFIG_HOME}/git/ignore"
cp -n  "${HOME}/code/dotfiles/gitk"				"${XDG_CONFIG_HOME}/git/gitk"
ln -sf "${HOME}/code/dotfiles/bin/git-outgoing"	"${BINHOME}/git-outgoing"
ln -sf "${HOME}/code/dotfiles/bin/git-working-history"	"${BINHOME}/git-working-history"

# XXX gitk tweaks

# XXX gimprc

# XXX lynxrc

# XXX tmux

# .signature
ln -sf "${HOME}/code/dotfiles/signature"		"${HOME}/.signature"

# .face
ln -sf "${HOME}/code/dotfiles/face"				"${HOME}/.face"

# motd
# ln header into /etc/update-motd.d/
cp -n "${HOME}/code/dotfiles/motd-updatemotdd-01-header" "${HOME}/code/dotfiles/motd-${SHORTHOST}-header"
echo "Permission to create /etc/update-motd.d/01-${SHORTHOST}-header symlink to "${HOME}/code/dotfiles/motd-${SHORTHOST}-header
sudo ln -s "${HOME}/code/dotfiles/motd-${SHORTHOST}-header" "/etc/update-motd.d/01-${SHORTHOST}-header"

# Prevent reruns
date --iso-8601=s > "${HOME}/settings/dotfiles-setup-done"

